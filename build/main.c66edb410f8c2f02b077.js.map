{"version":3,"sources":["webpack:///./js/task-3.js","webpack:///./index.js","webpack:///./js/task-1.js","webpack:///./js/task-2.js"],"names":["makeTransaction","transaction","onSuccess","onError","delay","min","max","Math","floor","random","Promise","resolve","reject","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch","ms","resolved","logger","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":"4EAAA,MAIMA,EAAkB,CAACC,EAAaC,EAAWC,KAC/C,MAAMC,GAL2BC,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOtC,OAAO,IAAII,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACUN,KAAKE,SAAW,GAGjCE,GAASV,EAAYa,GAAIV,IAEzBQ,EAAOX,EAAYa,KAEpBV,MAIDW,EAAa,CAACD,EAAIE,KACtBC,QAAQC,IAAK,eAAcJ,kBAAmBE,QAG1CG,EAAYL,IAChBG,QAAQG,KAAM,gCAA+BN,+BAG/Cd,EAAgB,CAAEc,GAAI,GAAIO,OAAQ,MAAOC,KAAKP,GAAYQ,MAAMJ,GAEhEnB,EAAgB,CAAEc,GAAI,GAAIO,OAAQ,MAAOC,KAAKP,GAAYQ,MAAMJ,GAEhEnB,EAAgB,CAAEc,GAAI,GAAIO,OAAQ,KAAMC,KAAKP,GAAYQ,MAAMJ,GAE/DnB,EAAgB,CAAEc,GAAI,GAAIO,OAAQ,MAAOC,KAAKP,GAAYQ,MAAMJ,I,kCClChE,sC,mBCAA,MAAMf,EAASoB,GACN,IAAId,QAASe,IAClBZ,WAAW,KACTY,EAASD,IACRA,KAIDE,EAAUV,GAASC,QAAQC,IAAK,kBAAiBF,OAEvDZ,EAAM,KAAMkB,KAAKI,GACjBtB,EAAM,KAAMkB,KAAKI,GACjBtB,EAAM,MAAMkB,KAAKI,I,mBCZjB,MAAMC,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAItB,QAASC,IAIlBA,EAHqBoB,EAASE,IAAKC,GACjCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAM7DR,EAAUS,GAAiBlB,QAAQmB,MAAMD,GAE/CL,EAAgBH,EAAO,SAASL,KAAKI,GACrCI,EAAgBH,EAAO,OAAOL,KAAKI,K","file":"main.c66edb410f8c2f02b077.js","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve((transaction.id, delay));\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './js/task-1'\nimport './js/task-2'\nimport './js/task-3'","const delay = (ms) => {\n  return new Promise((resolved) => {\n    setTimeout(() => {\n      resolved(ms);\n    }, ms);\n  });\n};\n\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: true },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: true },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve) => {\n    const updatedUsers = allUsers.map((user) =>\n      user.name === userName ? { ...user, active: !user.active } : user\n    );\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = (updatedUsers) => console.table(updatedUsers);\n\ntoggleUserState(users, \"Mango\").then(logger);\ntoggleUserState(users, \"Lux\").then(logger);\n"],"sourceRoot":""}